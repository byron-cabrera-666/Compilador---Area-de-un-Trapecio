
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package areatrapecio;

import java.io.FileReader;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\003\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\003\005\006\004\001\002\000\006\003" +
    "\013\004\012\001\002\000\010\002\ufffe\003\ufffe\006\ufffe" +
    "\001\002\000\010\002\011\003\005\006\004\001\002\000" +
    "\010\002\uffff\003\uffff\006\uffff\001\002\000\010\002\001" +
    "\003\001\006\001\001\002\000\004\002\000\001\002\000" +
    "\006\003\015\006\014\001\002\000\010\002\ufffd\003\ufffd" +
    "\006\ufffd\001\002\000\006\003\017\004\016\001\002\000" +
    "\010\002\ufffc\003\ufffc\006\ufffc\001\002\000\006\003\021" +
    "\006\020\001\002\000\010\002\ufffb\003\ufffb\006\ufffb\001" +
    "\002\000\006\003\023\005\022\001\002\000\010\002\ufffa" +
    "\003\ufffa\006\ufffa\001\002\000\010\002\ufff8\003\ufff8\006" +
    "\ufff8\001\002\000\010\002\ufff9\003\ufff9\006\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\002\005\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





/* Reporte de error */
    public void report_error(String message, Object info) { // recive el mensaje y el valor de la informacion
        StringBuilder m = new StringBuilder("Error"); // Inicializa una nueva instancia de la clase StringBuilder con la cadena especificada, guarda la cadena "Error" en la variable m
        if (info instanceof java_cup.runtime.Symbol) { // conprueba k la informacion k se recive sea de tipo simbol
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info); // la informacion que k se recivio la guardamos en la variable s
            if (s.left >= 0) {          //   Comprueba si la informacion symbol es mayor o igual a cero, pero en lado izquierdo.
                m.append(" in line "+(s.left+1)); // concatena la palabra "Error" con la frace "in line", y muestre en que linea se encuentra el error
                if (s.right >= 0)       // Comprueba si la informacion symbol es mayor o igual a cero, pero en lado derecho.
                    m.append(", column "+(s.right+1)); // concatena la palabra "Error" con la frace "column", y muestre en que columna se encuentra el error
            }
        }
        m.append(" : "+message); // concatena ":" con el mensaje de error
        System.err.println(m); // imprime el error
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) { // recive el mensaje y el valor de la informacion
        report_error(message, info); // llama al metodo report_error y le envia los parametros
        System.exit(1); // finaliza la ejecucion 
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico*/
    public static void main(String[] args){ // 
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico( // creamos una instancia de la clase AnalizadorSintactico
                    new AreaTrapecio( new FileReader(args[0])));  // sirve para leer el archivo txt
            Object result = asin.parse().value;                   // ejecutar el parse
            System.out.println("\n*********** Fin de ejecucion **********"); // imprime mensaje 
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

// metodo para calcular el area de un trapecio
public void calcularArea(int Bmayor, int Bmenor, int AlturaTra){ // recibimos los tres parametros
  int area=0; // inicializamos en cero
  area=((Bmayor+Bmenor)*AlturaTra)/2; // formula del area del trapecio
  System.out.println(" EL AREA DEL TRAPECIO ES: "+ area); // imprime el resultado
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // atrape ::= atrape linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("atrape",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= atrape EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atrape ::= linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("atrape",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA EL PRIMER NUMERO (BASE MENOR)", 4 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= NUMERO error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA UNA COMA EN PRIMER NUMERO", 2 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= NUMERO COMA error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA EL SEGUNDO NUMERO (BASE MAYOR)", 4 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linea ::= NUMERO COMA NUMERO error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA UNA COMA EN SEGUNDO NUMERO", 2 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // linea ::= NUMERO COMA NUMERO COMA error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA EL TERCER NUMERO (ALTURA)", 4 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linea ::= NUMERO COMA NUMERO COMA NUMERO error 
            {
              Object RESULT =null;
		parser.report_fatal_error("FAlTA LA PALABRA RESERVADA <<AreaTrapecio>>", 3 ); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= NUMERO COMA NUMERO COMA NUMERO FINLINEA 
            {
              Object RESULT =null;
		int bmaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int bmaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Integer bma = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bmeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bmeright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Integer bme = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Integer al = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		parser.calcularArea(bma,bme,al); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
